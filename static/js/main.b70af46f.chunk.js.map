{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,MAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,WAAWC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACzB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAAAR,GAAK,OAC7B,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCLhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAcC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAY,SACZa,KAAO,SACPC,YAAeH,EACfI,SAAYH,MCsCLI,G,wDAtCb,aAAc,IAAD,8BACX,gBAeFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IAJJ,E,gEAUO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAOjC,IAAD,EAE4BC,KAAKN,MAAhCd,EAFD,EAECA,SAAWW,EAFZ,EAEYA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK/B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEW,YAAc,kBACdC,aAAgBgB,KAAKhB,eACvB,cAAC,EAAD,CAAUJ,SAAYqB,W,GAlCZI,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b70af46f.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css'\n\nexport const Card = props => (\n\n    <div className = \"card-container\">\n        <img alt = \"monsters\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=220x220`} />\n        <h2> {props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n\n); ","import React from 'react'\n\nimport { Card } from '../card/card.component'\n\nimport '../card-list/card-list.style.css';\n\nexport const CardList = props => (\n<div className= \"card-list\"> \n    {props.monsters.map( monster =>( \n        <Card key = {monster.id} monster = {monster}/>\n    ))}\n</div>\n);","import React from 'react'\n\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeHolder , handleChange}) => (\n    <input\n        className = 'search'\n        type = 'search'\n        placeholder = {placeHolder}\n        onChange = {handleChange}\n    />\n)\n\n","import React , { Component } from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n  \n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render(){\n\n    const {monsters , searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n        <h1> Monster Roledex </h1>\n        <SearchBox \n          placeHolder = 'search monsters'\n          handleChange = {this.handleChange}/>\n        <CardList monsters = {filteredMonsters}/> \n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}